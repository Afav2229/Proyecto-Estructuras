# Sistema de Optimizaci√≥n de Rutas del √Årea Metropolitana de Bucaramanga

## Descripci√≥n del Problema
El √°rea metropolitana de Bucaramanga necesita un sistema eficiente para gestionar y optimizar las rutas de transporte p√∫blico. Este proyecto implementa una soluci√≥n que permite:
- Visualizar las rutas existentes
- Encontrar caminos √≥ptimos entre paradas
- Gestionar din√°micamente la red de transporte

## Etapas Desarrolladas

### 1. Sistema Base con Listas Enlazadas
- Implementaci√≥n de una estructura b√°sica para almacenar paradas
- Gesti√≥n de recorridos usando listas enlazadas simples
- Funcionalidades b√°sicas de agregar/eliminar paradas
[`avanceProyecto_eYa.py`](Proyecto-Estructuras/avanceProyecto_eYa.py)

### 2. Implementaci√≥n con √Årboles
- Organizaci√≥n jer√°rquica de rutas tur√≠sticas
- B√∫squeda eficiente de destinos
- Gesti√≥n de rutas alternativas
[`Parte2_proyecto_arboles.py`](Proyecto-Estructuras/Parte2_proyecto_arboles.py)

### 3. Optimizaci√≥n con Grafos
- Representaci√≥n de la red mediante grafos
- Algoritmos de b√∫squeda de rutas √≥ptimas
- Visualizaci√≥n interactiva del sistema
[`Proyecto3.py`](Proyecto-Estructuras/Proyecto3.py)

## Caracter√≠sticas Principales
- üöç Gesti√≥n din√°mica de paradas y conexiones
- üó∫Ô∏è Visualizaci√≥n gr√°fica de la red de transporte
- ‚ö° B√∫squeda de rutas √≥ptimas (m√°s cortas/m√°s largas)
- üíæ Persistencia de datos en formato JSON
- üîÑ Actualizaciones en tiempo real

## Tecnolog√≠as Utilizadas
- Python 3.x
- NetworkX para manejo de grafos
- Matplotlib para visualizaci√≥n
- JSON para almacenamiento persistente

## Estructura del Proyecto
```
Proyecto-Estructuras/
‚îú‚îÄ‚îÄ avanceProyecto_eYa.py    # Implementaci√≥n con listas enlazadas
‚îú‚îÄ‚îÄ Parte2_proyecto_arboles.py # Implementaci√≥n con √°rboles
‚îú‚îÄ‚îÄ Proyecto3.py              # Implementaci√≥n final con grafos
‚îú‚îÄ‚îÄ grafo.json               # Almacenamiento de datos
‚îî‚îÄ‚îÄ README.txt               # Documentaci√≥n del proyecto
```

## Equipo de Desarrollo
- **Autor**: Andres Felipe Alfonso Viviescas
- **C√≥digo**: 2162063
- **Universidad**: Universidad Industrial de Santander
- **Facultad**: Ingenier√≠as Fisicomec√°nicas
- **Escuela**: Ingenier√≠a de Sistemas
- **Asignatura**: Estructuras de datos y an√°lisis de algoritmos

## C√≥mo Ejecutar
1. Aseg√∫rese de tener Python 3.x instalado
2. Instale las dependencias:
```bash
pip install networkx matplotlib
```
3. Ejecute el programa principal:
```bash
python Proyecto3.py
```

## Manual de Usuario
El sistema ofrece un men√∫ interactivo con las siguientes opciones:
1. Agregar parada
2. Agregar conexi√≥n
3. Eliminar parada
4. Buscar parada
5. Mostrar rutas
6. Obtener pr√≥xima parada
7. Visualizar grafo
8. Encontrar ruta √≥ptima
9. Salir

## Funcionalidades Adicionales
- Agregar/Eliminar paradas
- Conectar paradas secuencialmente 
- Buscar paradas en la ruta
- Validaci√≥n de datos b√°sica

Mejoras Implementadas en Cada Etapa
Etapa 1 ‚Üí Etapa 2
De estructura lineal a jer√°rquica
Mejora en eficiencia de b√∫squeda
Implementaci√≥n de recorridos alternativos
Etapa 2 ‚Üí Etapa 3
De √°rbol a grafo completo
Implementaci√≥n de pesos en conexiones
Visualizaci√≥n interactiva
Sistema de rutas √≥ptimas
Resultados Finales
Sistema robusto y escalable
Interfaz de usuario intuitiva
Optimizaci√≥n efectiva de rutas
Visualizaci√≥n clara de la red
Manejo eficiente de datos
Este desarrollo iterativo permiti√≥ mejorar progresivamente el sistema, incorporando nuevas funcionalidades y optimizando el rendimiento en cada etapa.